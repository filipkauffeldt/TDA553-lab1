1.Your design probably has a type called something like Car or Vehicle that is a supertype to both Volvo and Scania. 
What is the contract for gas() and brake() in this type? Do the implementations of gas() and brake() in both Volvo and Scania follow this contract? 
Does your design follow the Liskov Substitution Principle?

The contract for the gas() and break() it to increment and decrement the speed of the car. By calling gas() or break() we are starting a chain reaction to then
call incrementSpeed() or decrementSpeed(), that calls setCurrentSpeed() and sets it to the appropriate value. 
So the contract for gas() and break() is to increase or decrease the speed of the car, which the methods dose. 
Becasue the car class is abstract we dosent have to implement their own gas() and brake() in the saab and volvo classes. 
But what we can see is that the method speedFactor() is a method that both saab and volvo and has to override to implement how fast the car goes.
Our code follows the Liskov Substitution Principle. 


2.How did you handle duplicated code between Scania, the car transporters and the repair shops? Explain how you decided when to use subclassing and when to use composition and delegation.

To avoid code dublication we used subclassing for the car class and truck class. Their superclass is Vehicle. Why we used subclassing for car and truck is because we know that car and truck IS a Vehicle.
The same goes for saab and volvo. We know that saab and volvo IS a car, and that is why we used subclassing.

We used composition and delegation for the trailer. That is because we know that a truck HAS a trailer, the trailer is a part of the truck, the truck can still function without a trailer. 



3.Did you need to modify the design from lab 1 in order to make these extensions? If so, how could you have noticed that your design from Lab 1 did not follow the Open-Closed Principle before you started working on Lab 2?
No we did not had to, but we wanted to make changes to the code. 
We did not brake the Open closed principle. We could implement new cars in lab 1 but for our desing to also follow other SOLID principle and good design we changed a couple different things.